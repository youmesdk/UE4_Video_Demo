// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
 YoumeVideoShaders.usf: Shaders to convert various media decoder outputs to RGBA
 =============================================================================*/

// #include "Engine/Private/Common.ush"
// #include "Engine/Private/ColorUtils.ush"
// #include "Engine/Private/GammaCorrectionCommon.ush"

#include "/Engine/Public/Platform.ush"

/* Vertex shader
=============================================================================*/

void YoumeVertexShader(
	in float4 InPosition : ATTRIBUTE0,
	in float2 InUV : ATTRIBUTE1,
	out float4 OutPosition : SV_POSITION,
	out float2 OutUV : TEXCOORD0)
{
	OutPosition = InPosition;
	OutUV = InUV;
}


/* Pixel shaders
=============================================================================*/


float3 sRGBToLinear( float3 Color ) 
{
	Color = max(6.10352e-5, Color); // minimum positive non-denormal (fixes black problem on DX11 AMD and NV)
	return Color > 0.04045 ? pow( Color * (1.0 / 1.055) + 0.0521327, 2.4 ) : Color * (1.0 / 12.92);
}

float3 YoumeYuvToRgb(float3 YUV, float4x4 ColorTransform, uint SrgbToLinear)
{
	float3x3 Coeff = float3x3(
		ColorTransform[0].xyz,
		ColorTransform[1].xyz,
		ColorTransform[2].xyz
	);

	// Offset in last column of matrix
	YUV -= float3(ColorTransform[0].w, ColorTransform[1].w, ColorTransform[2].w);
	float3 sRGB = mul(Coeff, YUV);

	return (SrgbToLinear == 1) ? sRGBToLinear(sRGB) : sRGB;
}


float4x4 ColorTransform;
uint SrgbToLinear;
float2 UVScale;
Texture2D YTexture;
Texture2D UTexture;
Texture2D VTexture;
SamplerState YSampler;
SamplerState USampler;
SamplerState VSampler;



void YoumeYUVConvertPS(
	float4 InPosition : SV_POSITION,
	float2 InUV : TEXCOORD0,
	out float4 OutColor : SV_Target0)
{
	float2 ScaledUV = InUV * UVScale;

	float3 YUV;
	YUV.x = YTexture.Sample(YSampler, ScaledUV).x;
	ScaledUV.x *= 0.5;
	YUV.y = UTexture.Sample(USampler, ScaledUV).x;
	YUV.z = VTexture.Sample(VSampler, ScaledUV).x;
	
	OutColor.xyz = YoumeYuvToRgb(YUV, ColorTransform, SrgbToLinear);

	// OutColor.x = YUV.y;
	// OutColor.y = YUV.y;
	// OutColor.z = YUV.y;

	OutColor.w = 1.0f;
}